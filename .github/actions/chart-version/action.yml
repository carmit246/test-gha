nsme:
description:
inputs:
  folder:
    required: true
    default: argo-test
    description: Helm charts root folder path
  chart:
    required: false
    description: Helm chart path
  chart_name:
    required: false
    description: Helm chart name
  gh_token:
    required: true
    description: Github App token

runs:
  using: "composite"
  steps:
  - name: increment version
    id: chart-version
    shell: bash
    run: |
      echo ${{ inputs.folder }}
      echo ${{ inputs.chart }}
      current_version=$(cat ${{ inputs.chart }}/Chart.yaml| grep version: | awk '{print $2}')
      echo $current_version
      new_version=$(IFS=.;set -- $current_version;echo "$1.$((10#$2+1)).$3";)
      branch=$(echo ${{ inputs.chart }} | xargs -L1 dirname | sed 's/.*\///' )-$new_version
      git checkout -b $branch
      echo "BRANCH=$branch" >> $GITHUB_OUTPUT
      echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT
      echo "OLD_VERSION=$current_version" >> $GITHUB_OUTPUT
      echo sed -i "s/version: ${current_version}/version: ${new_version}/g" ${{ inputs.chart }}/Chart.yaml
      sed -i "s/version: ${current_version}/version: ${new_version}/g" ${{ inputs.chart }}/Chart.yaml

  - name: Commit and open PR
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: |
      git config --global user.email "test@test.com"
      git config --global user.name "test"
      git add ${{ inputs.chart }}/Chart.yaml
      message="Increment chart ${{ inputs.chart }} version: ${{ steps.chart-version.outputs.OLD_VERSION }} --> ${{ steps.chart-version.outputs.NEW_VERSION }} [skip ci]"
      echo "$message"
      git commit -m "$message"
      git push --set-upstream origin ${{ steps.chart-version.outputs.BRANCH }}
      gh pr create --base main --head ${{ steps.chart-version.outputs.BRANCH }} --title "$message" --body "$message"

  - name: Merge PR
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: |
      WAIT_TIME=0
      until [ $WAIT_TIME -eq 10 ] || gh pr merge --admin --delete-branch --squash ${{ inputs.branch }}; do
        WAIT_TIME=$(( WAIT_TIME + 1 ))
        sleep $WAIT_TIME
      done
